#!/usr/bin/env python3
"""
Filter NDJSON for seasonal-flu specific records by lineage and host
"""
import argparse
from sys import stdin
from typing import Iterable, List
from augur.io.json import dump_ndjson, load_ndjson
from augur.io.print import print_err


LINEAGES = [
    'h1n1pdm',
    'h3n2',
    'vic',
    'yam'
]

HOSTS = [
    'human',
]


def filter_records(records: Iterable[dict],
                   record_id_field: str,
                   lineage_field: str,
                   host_field: str,
                   lineages_to_include: List[str],
                   hosts_to_include: List[str]) -> Iterable:
    """
    Filter for *records* that have *lineage_field* and *host_field* matching
    the *lineages_to_include* and *host_to_include*.

    Records that do not match will be skipped.
    """
    for record in records:
        record_id = record.get(record_id_field, "")
        lineage = record.get(lineage_field)
        host = record.get(host_field)

        if lineage is None:
            raise Exception(f"Records must have the expected lineage field: {lineage_field!r}")

        if host is None:
            raise Exception(f"Records must have the expected host field: {host_field!r}")

        if lineage in lineages_to_include and host in hosts_to_include:
            yield record
        else:
            print_err(f"WARNING: Skipping record {record_id!r} because it does not match filters for seasonal flu.")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("--id-field", default="gisaid_epi_isl",
        help="The record field containing the record id.")
    parser.add_argument("--lineage-field", default="lineage",
        help="The record field containing the standardized lineage.")
    parser.add_argument("--host-field", default="host",
        help="The record field containing the host.")
    parser.add_argument("--lineages", nargs="*", default=LINEAGES,
        help="Lineages to include in the output.")
    parser.add_argument("--hosts", nargs="*", default=HOSTS,
        help="Hosts to include in the output directory.")

    args = parser.parse_args()

    records = load_ndjson(stdin)
    modified_records = filter_records(
        records,
        args.id_field,
        args.lineage_field,
        args.host_field,
        args.lineages,
        args.hosts)
    dump_ndjson(modified_records)
