#!/usr/bin/env python3
"""
Curates GISAID gender field.

1. Lowercase gender values
2. Default empty gender values to '?'
3. Checks records have expected gender values
"""
import argparse
from sys import stdin
from typing import Iterable
from augur.io.json import dump_ndjson, load_ndjson


DEFAULT_UNKNOWN_VALUE = "?"
EXPECTED_GENDER_VALUES = {
    DEFAULT_UNKNOWN_VALUE,
    "female",
    "male",
}


def standardize_gender(records: Iterable,
                       gender_field: str,
                       new_gender_field: str) -> Iterable:
    """
    Standardizes the *gender_field* to create the *new_gender_field*.
    Defaults unknown gender to `DEFAULT_UNKNOWN_VALUE`.

    Yields the modified records.
    """
    for record in records:
        record = record.copy()
        gender = record.get(gender_field)

        if not gender:
            gender = DEFAULT_UNKNOWN_VALUE

        gender = gender.lower()
        if gender not in EXPECTED_GENDER_VALUES:
            raise Exception(f"Encountered unexpected gender value: {gender!r}")

        record[new_gender_field] = gender

        yield record


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("--gender-field", default="Host_Gender",
        help="The record field that contains the GISAID gender value.")
    parser.add_argument("--new-gender-field", default="gender",
        help="The name of the new field to add to the record with the " + \
             "standardized gender value. " + \
             f"If gender is unknown, will default to {DEFAULT_UNKNOWN_VALUE!r}")

    args = parser.parse_args()

    records = load_ndjson(stdin)
    modified_records = standardize_gender(records,
                                          args.gender_field,
                                          args.new_gender_field)
    dump_ndjson(modified_records)
